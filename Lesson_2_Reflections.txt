**Lesson 2 Reflections**

========================

_**What happens when you initialize a repository? Why do you need to do it?**_

I’m basically creating a new place for Git to store the data of the snapshots I will be saving.

_**How is the staging area different from the working directory and the repository?
What value do you think it offers?**_

The staging area is a middle transition point in between the working directory and the repository. The value of a staging area is that I can add and commit only the parts of the working directory that I want to add to the repository.

_**How can you use the staging area to make sure you have one commit per logical
change?**_

I can compare the contents of the staging area to that of the working directory and the most recent commit. In doing so, I can make sure my commits are logically separate because I can compare my files before I make any commits.

_**What are some situations when branches would be helpful in keeping your history
organized? How would branches help?**_

Branches are helpful when I want to ensure that the main, stable version of my code remains that way, while I create another branch to work on an experimental feature or possibly something that might break my stable version. In which case, I could create another branch to test out these experimental features without worrying about breaking my entire code with irreversible consequences.

_**How do the diagrams help you visualize the branch structure?**_

Diagrams help in visualizing what the parent of each commit is. When there are multiple branches, I can use a diagram to easily see what changes will be part of each branch.

_**What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?**_

Merging two branches together effectively forms a new branch, compiling all the commits of those two branches. We represent the merge in the diagram as having two parents because we’re taking the commits of each branch and merging them together, thereby creating a third branch, which would be those two branches’ child.

_**What are the pros and cons of Git's automatic merging vs. always doing merges
manually?**_

Git’s automatic merging probably saves us a lot of time especially if we’ll be collaborating with different people, compared to manually merging.

However, a downside of this automatic merging might be if one collaborator accidentally deleted a key component of one branch, while a second branch’s code depended on that key component, I believe those two branches would be merged and the result would be a broken code.